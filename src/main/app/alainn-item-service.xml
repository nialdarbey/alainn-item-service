<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:https="http://www.mulesoft.org/schema/mule/https"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/current/mule-https.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
    
    <https:connector name="httpsConnector" cookieSpec="netscape" validateConnections="true" sendBufferSize="0" receiveBufferSize="0" receiveBacklog="0" clientSoTimeout="10000" serverSoTimeout="10000" socketSoLinger="0" doc:name="HTTP\HTTPS">
        <service-overrides messageFactory="org.mule.transport.http.HttpMultipartMuleMessageFactory" />
        <https:tls-key-store path="keystore.jks" keyPassword="changeit" storePassword="changeit" />
    </https:connector>
    <mulexml:namespace-manager includeConfigNamespaces="true">
        <mulexml:namespace prefix="mes" uri="http://www.alainn.com/SOA/message/1.0" />
        <mulexml:namespace prefix="mod" uri="http://www.alainn.com/SOA/model/1.0" />
    </mulexml:namespace-manager>
    <secure-property-placeholder:config name="Secure_Property_Placeholder" key="${props.key}" location="config.${env}.properties" doc:name="Secure Property Placeholder"/>
	<db:mysql-config name="MySQL_Configuration"
		host="${db.host}"
		port="3306" user="${db.user}" password="${db.password}" database="${db.database}"
		doc:name="MySQL Configuration" />
    <data-mapper:config name="map_to_xml_1" transformationGraphPath="map_to_xml_1.grf" doc:name="map_to_xml_1"/>
    <data-mapper:config name="map_to_xml" transformationGraphPath="map_to_xml.grf" doc:name="map_to_xml"/>
    <data-mapper:config name="XML_To_Map" transformationGraphPath="xml_to_map.grf" doc:name="XML_To_Map"/>
    <data-mapper:config name="Map_To_XML3" transformationGraphPath="map_to_xml_3.grf" doc:name="Map_To_XML"/>
    <data-mapper:config name="Map_To_XML" transformationGraphPath="map_to_xml_2.grf" doc:name="Map_To_XML"/>
    
    <flow name="ItemserviceFlow1" doc:name="ItemserviceFlow1">
        <https:inbound-endpoint exchange-pattern="request-response" host="localhost" port="${https.port}" path="item-service" doc:name=":8081/item-service" connector-ref="httpsConnector"/>
        <cxf:proxy-service doc:name="Proxy service" namespace="http://www.alainn.com/SOA/service/Item/1.0" port="ItemPort" service="ItemService" wsdlLocation="service/ItemService.wsdl" payload="body" >
            <cxf:schemaLocations>
                <cxf:schemaLocation>service/SOA-Message-1.0.xsd</cxf:schemaLocation>
            </cxf:schemaLocations>
        </cxf:proxy-service>
        <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
        <set-variable variableName="opName" value="#[xpath('fn:local-name(/*)')]" doc:name="opName"/>
        <choice doc:name="Choice">
            <when expression="#[opName == 'getItems']">
            	<set-variable variableName="imageMultiple" value="#[xpath('/mes:getItems/mes:ImageType/text()').text.split(',').length]" doc:name="imageMultiple"/>
            	<set-variable variableName="limit" value="#[Integer.valueOf(xpath('/mes:getItems/mes:PageInfo/pageSize/text()').text) * imageMultiple]" doc:name="pageSize" />
                <db:select config-ref="MySQL_Configuration" doc:name="select items" target="flowVars.items">
                    <db:dynamic-query><![CDATA[select i.item_id, i.item_name, i.item_summary, i.item_description, i.item_brand, 	
						it.item_type_name, im.url, imt.image_type_name 
						from item i, item_type it, image im, image_type imt
						where i.item_type_id = it.id
						and im.item_id = i.item_id
						and im.image_type_id = imt.id
					    and it.item_type_name like '#[n = xpath('/mes:getItems/mes:ItemSearchCriteria/type/text()').text; n == '*' ? '%' : n + '%']' 
					    and i.item_name like '#[n = xpath('/mes:getItems/mes:ItemSearchCriteria/name/text()').text; n == '*' ? '%' : n + '%']'
					    and i.item_brand like '#[n = xpath('/mes:getItems/mes:ItemSearchCriteria/brand/text()').text; n == '*' ? '%' : n + '%']'
					    and imt.image_type_name in ('#[xpath('/mes:getItems/mes:ImageType/text()').text.replaceAll(",", "','")]') 
					    order by item_id
					    limit #[Integer.valueOf(xpath('/mes:getItems/mes:PageInfo/pageIndex/text()').text)],#[limit]]]></db:dynamic-query>
                </db:select>
                <expression-transformer doc:name="to []" expression="
                	np = [ 'pageInfo' : [ 'index' : Integer.valueOf(xpath('/mes:getItems/mes:PageInfo/pageIndex/text()').text), 'size' : (items.size() / imageMultiple) ], 'items' : [] ];
                	index = ['x' : 'x'];
                	for (record :  flowVars.items) {
                		if (index.containsKey(record.item_id)) {
                			image = [ 'url' : record.url, 'image_type_name' : record.image_type_name ]; 
                			index[record.item_id].images.add(image);
                		}
                		else {
                			item = [ 'item_id' : record.item_id, 'item_name': record.item_name, 'item_summary' : record.item_summary, 'item_description': record.item_description, 
                				'item_brand' : record.item_brand, 'item_type_name' : record.item_type_name, 'images' : [ ['url' : record.url, 'image_type_name' : record.image_type_name] ] ];
                			index.put(record.item_id, item);
                		}
                	};
                	index.remove('x');
                	np.items.addAll(index.values());
                	np
                ">
                </expression-transformer>
                <data-mapper:transform config-ref="map_to_xml" doc:name="Map To XML"/>
                
            </when>
            <when expression="#[opName == 'getItem']">
                <db:select config-ref="MySQL_Configuration" doc:name="select item">
                    <db:dynamic-query><![CDATA[select i.item_id, it.item_type_name, i.item_name, i.item_brand, i.item_description, 
						si.sku_id, si.sku_name, si.sku_summary, si.price, si.stock_quantity, 
						im.url, imt.image_type_name 
						from item i, item_type it, sku_item si, image im, image_type imt 
						where i.item_type_id = it.id
						and si.item_id = i.item_id
						and si.sku_id = im.item_sku_id
						and im.image_type_id = imt.id
						and i.item_id = '#[xpath('/mes:getItem/mod:ItemId/text()').text]' 
						and si.item_id = i.item_id
						and imt.image_type_name in ('#[xpath('/mes:getItem/mes:ImageType/text()').text.replaceAll(",", "','")]')]]></db:dynamic-query>
                </db:select>
                <expression-transformer doc:name="to []" expression="
                	first = payload[0];
                	np = [ 'item' : [ 'item_id' : first.item_id, 'item_name' : first.item_name, 'item_summary' : first.item_summary, 'item_description' : first.item_description, 'item_brand' : first.item_brand, 'item_type_name' : first.item_type_name ], 'item_skus' : [] ];
                	index = ['x' : 'x'];
                	for (record :  payload) {
                		if (index.containsKey(record.sku_id)) {
                			image = [ 'url' : record.url, 'image_type_name' : record.image_type_name ]; 
                			index[record.sku_id].images.add(image);
                		}
                		else {
                			sku = [ 'sku_id' : record.sku_id, 'sku_name': record.sku_name, 'sku_summary' : record.sku_summary, 
                				'price' : record.price, 'stock_quantity' : record.stock_quantity,
                				'images' : [ ['url' : record.url, 'image_type_name' : record.image_type_name] ] ];
                			index.put(record.sku_id, sku);
                   		}
                	};
                	index.remove('x');
                	np.item_skus.addAll(index.values());
                	np
                ">
                </expression-transformer>
                
                <data-mapper:transform doc:name="Map To XML" config-ref="map_to_xml_1"/>
                
            </when>
            <when expression="#[opName == 'getTypes']">
                <db:select config-ref="MySQL_Configuration" doc:name="select types" target="flowVars.types">
                    <db:parameterized-query><![CDATA[select item_type_name from item_type
order by item_type_name
limit #[Integer.valueOf(xpath('/mes:getTypes/mes:PageInfo/pageIndex/text()').text)],
#[Integer.valueOf(xpath('/mes:getTypes/mes:PageInfo/pageSize/text()').text)]]]></db:parameterized-query>
                </db:select>
                <expression-transformer doc:name="to []" expression="
                	np = [ 'pageInfo' : [ 'index' : Integer.valueOf(xpath('/mes:getTypes/mes:PageInfo/pageIndex/text()').text), 'size' : types.size() ], 'items' : [] ];
                	for (record :  types) {
                		np.items.add(record.item_type_name);
                	}
                	np
                " />
                <data-mapper:transform config-ref="Map_To_XML" doc:name="Map To XML"/>
            </when>
            <when expression="#[opName == 'modifySKUStockCount']">
                <data-mapper:transform config-ref="XML_To_Map" doc:name="XML To Map"/>
                <db:update config-ref="MySQL_Configuration" bulkMode="true" doc:name="Bulk modify sku stock count">
                    <db:parameterized-query><![CDATA[update sku_item set stock_quantity = stock_quantity - #[payload.quantity] where sku_id = #[payload.sku]]]></db:parameterized-query>
                </db:update>
                <parse-template location="modifySkuStockCountResponse.xml" doc:name="modifySkuStockCountResponse.xml"/>
                
            </when>
            <when expression="#[opName == 'getBrands']">
                <db:select config-ref="MySQL_Configuration" doc:name="select brands" target="flowVars.brands">
                    <db:parameterized-query><![CDATA[select distinct item_brand 
from item 
where item_brand != ''
order by item_brand
limit #[Integer.valueOf(xpath('/mes:getBrands/mes:PageInfo/pageIndex/text()').text)],
#[Integer.valueOf(xpath('/mes:getBrands/mes:PageInfo/pageSize/text()').text)]]]></db:parameterized-query>
                </db:select>
                <expression-transformer doc:name="to []" expression="
                	np = [ 'pageInfo' : [ 'index' : Integer.valueOf(xpath('/mes:getBrands/mes:PageInfo/pageIndex/text()').text), 'size' : brands.size() ], 'items' : [] ];
                	for (record :  brands) {
                		np.items.add(record.item_brand);
                	}
                	np
                " />
                <data-mapper:transform config-ref="Map_To_XML3" doc:name="Map to Xml&lt;getBrandsResponse&gt;">
                </data-mapper:transform>
            </when>
            <otherwise>
                <scripting:component doc:name="Exception">
                    <scripting:script engine="Groovy"><![CDATA[throw new RuntimeException("Unknown Operation: " + flowVars.opName);]]></scripting:script>
                </scripting:component>
            </otherwise>
        </choice>

    </flow>
   

</mule>
